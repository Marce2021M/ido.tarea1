---
title: "IDO-  Tarea 1"
lang: es
author: 
  - Marcelino Sánchez Rodríguez 191654
date: today
format:
  pdf:
    latex_engine: xelatex
nocite: |
  @*
---
\newpage
# Problema de la ONU

## Enunciado

Considere la situación en que se asignan $M$ poblaciones en $N$ áreas
distintas. El tamaño de la población $i$ es $p_i$ y el costo de la
asignación de la población $i$ al área $j$ es $c_{ij}$ . Un área seleccionada en
la solución óptima debe incluir al menos $L$ personas ($L$ se supone
constante). También cada área puede aceptar más de una
población. El objetivo del problema trata de la minimización del
costo total de las asignaciones.
Supongamos que:
$x_{ij} = 1$ si se asigna la población $i$ al área $j$, y $0$ en caso contrario
$y_{j} = 1$ si se apunta el área $j$ en la solución, y $0$ en caso contrario


## Formulación

\begin{align*}
\text{min} \quad & \sum_{i=1}^{M} \sum_{j=1}^{N} c_{ij} x_{ij} \\
\text{s.a.} \quad & \sum_{j=1}^{N} x_{ij} = 1, \quad i = 1, \ldots, M \\
& \sum_{i=1}^{M} p_{i} x_{ij} \geq L y_{j}, \quad j = 1, \ldots, N \\
& \sum_{i=1}^{M} p_{i} x_{ij}  \leq \left( \sum_{i=1}^{M} p_{i} \right)y_{j} \quad j = 1, \ldots, N  \\
& y_{ij} = \begin{cases} 
1 & \text{si el área } j \text{ se utiliza} \\
0 & \text{en otro caso}
\end{cases} \\
& x_{ij} = \begin{cases} 
1 & \text{si la población } i \text{ está en el área } j \\
0 & \text{en otro caso}
\end{cases} \\
& x_{ij}, y_{ij} \geq 0, \quad i = 1, \ldots, M, \; j = 1, \ldots, N
\end{align*}

# Modelo en julia

```{julia}
using JuMP, HiGHS
M = 6
N = 7
L = 100

matrixCostos = [
    10 30 30 40 50 60 80;
    50 25 40 30 60 30 5;
    70 50 15 60 40 50 60;
    30 50	40	30	10	70	45;
    60 30	40	10	50	70	35;
    30 40	50	30	40	50	10;
]

poblacion = [75, 50, 100, 150, 120, 80]

model = Model(HiGHS.Optimizer)

@variable(model, x[1:M, 1:N] >= 0, Bin)
@variable(model, y[1:N] >= 0, Bin)

@constraint(model, [i=1:M], sum(x[i,j] for j=1:N) == 1)
@constraint(model, [j=1:N], sum(x[i,j]*poblacion[i] for i=1:M) >= L*y[j])
@constraint(model, [j=1:N], sum(x[i,j]*poblacion[i] for i=1:M) <= sum(poblacion)*y[j])

@objective(model, Min, sum(matrixCostos[i,j]*x[i,j] for i=1:M, j=1:N))

optimize!(model)



```

```{julia}
solution_summary(model; verbose = true)
```

```{julia}
value.(x)
```

```{julia}
value.(y)

```
